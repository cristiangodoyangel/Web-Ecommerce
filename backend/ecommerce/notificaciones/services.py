import logging
from typing import Optional, Dict, Any
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string
from django.conf import settings
from django.utils import timezone
from django.contrib.auth import get_user_model
from .models import (
    NotificacionCorreo, TemplateCorreo, ConfiguracionNotificacion,
    TipoNotificacion, EstadoNotificacion
)

User = get_user_model()
logger = logging.getLogger(__name__)

class NotificacionService:
    """Servicio principal para el env√≠o de notificaciones por correo"""
    
    def __init__(self):
        self.from_email = settings.EMAIL_FROM
        self.site_url = settings.SITE_URL
    
    def enviar_notificacion(
        self,
        usuario,
        tipo_notificacion: str,
        datos_contexto: Optional[Dict[str, Any]] = None,
        email_destinatario: Optional[str] = None,
        programar_envio: Optional[timezone.datetime] = None
    ):
        """
        Env√≠a una notificaci√≥n por correo electr√≥nico
        
        Args:
            usuario: Usuario destinatario
            tipo_notificacion: Tipo de notificaci√≥n (debe estar en TipoNotificacion)
            datos_contexto: Datos adicionales para el template
            email_destinatario: Email espec√≠fico (usa usuario.email si no se proporciona)
            programar_envio: Fecha para programar el env√≠o
            
        Returns:
            NotificacionCorreo: Instancia de la notificaci√≥n creada
        """
        print(f"\n{'='*60}")
        print(f"üìß [NOTIF-SERVICE] Enviar notificaci√≥n solicitada")
        print(f"{'='*60}")
        print(f"üìã Tipo: {tipo_notificacion}")
        print(f"üë§ Usuario: {usuario.email if hasattr(usuario, 'email') else 'Sin email'}")
        print(f"üìÆ Email destinatario: {email_destinatario}")
        print(f"üì¶ Contexto: {datos_contexto}")
        print(f"‚è∞ Programada: {programar_envio}")
        
        if not email_destinatario:
            email_destinatario = usuario.email if hasattr(usuario, 'email') else None
            print(f"üìß [NOTIF-SERVICE] Email destinatario tomado del usuario: {email_destinatario}")
        
        if not email_destinatario:
            print(f"‚ùå [NOTIF-SERVICE] ERROR: No hay email destinatario")
            print(f"{'='*60}\n")
            return None
        
        datos_contexto = datos_contexto or {}
        
        # Verificar si el usuario puede recibir este tipo de notificaci√≥n
        print(f"üîç [NOTIF-SERVICE] Verificando permisos de notificaci√≥n...")
        puede_recibir = self._puede_recibir_notificacion(usuario, tipo_notificacion)
        print(f"{'‚úÖ' if puede_recibir else '‚ùå'} [NOTIF-SERVICE] Puede recibir: {puede_recibir}")
        
        if not puede_recibir:
            logger.info(f"Usuario {email_destinatario} no permite notificaciones de tipo {tipo_notificacion}")
            print(f"‚ö†Ô∏è [NOTIF-SERVICE] Usuario no permite este tipo de notificaciones")
            print(f"{'='*60}\n")
            return None
        
        # Crear el registro de notificaci√≥n
        print(f"üíæ [NOTIF-SERVICE] Creando registro de notificaci√≥n en BD...")
        try:
            notificacion = NotificacionCorreo.objects.create(
                usuario=usuario if hasattr(usuario, 'id') else None,
                tipo=tipo_notificacion,
                email_destinatario=email_destinatario,
                asunto="",  # Se llenar√° despu√©s
                contenido="",  # Se llenar√° despu√©s
                fecha_programada=programar_envio,
                estado=EstadoNotificacion.PROGRAMADA if programar_envio else EstadoNotificacion.PENDIENTE,
                orden_id=datos_contexto.get('orden_id'),
                producto_id=datos_contexto.get('producto_id'),
                datos_adicionales=datos_contexto
            )
            print(f"‚úÖ [NOTIF-SERVICE] Notificaci√≥n creada con ID: {notificacion.id}")
        except Exception as e:
            print(f"‚ùå [NOTIF-SERVICE] ERROR creando notificaci√≥n en BD")
            print(f"   Error: {str(e)}")
            print(f"   Tipo: {type(e).__name__}")
            print(f"{'='*60}\n")
            raise
        
        # Si no est√° programado, enviar inmediatamente
        if not programar_envio:
            print(f"üì§ [NOTIF-SERVICE] Enviando inmediatamente...")
            self._procesar_notificacion(notificacion, datos_contexto)
        else:
            print(f"‚è∞ [NOTIF-SERVICE] Notificaci√≥n programada para: {programar_envio}")
        
        print(f"{'='*60}\n")
        return notificacion
    
    def _puede_recibir_notificacion(self, usuario, tipo_notificacion: str) -> bool:
        """Verifica si el usuario puede recibir el tipo de notificaci√≥n"""
        print(f"   üîç [PERMISOS] Verificando permisos para tipo: {tipo_notificacion}")
        print(f"   üë§ [PERMISOS] Usuario: {usuario.email if hasattr(usuario, 'email') else 'Sin email'}")
        
        if not hasattr(usuario, 'id'):
            print(f"   ‚ö†Ô∏è [PERMISOS] Usuario sin ID, asumiendo puede recibir (guest)")
            return True
        
        try:
            config = ConfiguracionNotificacion.objects.get(usuario=usuario)
            puede_recibir = config.puede_recibir_notificacion(tipo_notificacion)
            print(f"   ‚úÖ [PERMISOS] Config encontrada - Puede recibir: {puede_recibir}")
            return puede_recibir
        except ConfiguracionNotificacion.DoesNotExist:
            # Si no tiene configuraci√≥n, crear una por defecto
            print(f"   ‚ö†Ô∏è [PERMISOS] No existe config, creando por defecto...")
            ConfiguracionNotificacion.objects.create(usuario=usuario)
            print(f"   ‚úÖ [PERMISOS] Config creada, permitiendo notificaci√≥n")
            return True  # Por defecto permitir notificaciones importantes
        except Exception as e:
            print(f"   ‚ùå [PERMISOS] ERROR verificando permisos: {str(e)}")
            return True  # En caso de error, permitir el env√≠o
    
    def _procesar_notificacion(self, notificacion: NotificacionCorreo, datos_contexto: Dict[str, Any]):
        """Procesa y env√≠a la notificaci√≥n"""
        print(f"\n{'='*60}")
        print(f"üìß [EMAIL-SERVICE] Procesando notificaci√≥n")
        print(f"{'='*60}")
        print(f"üÜî ID Notificaci√≥n: {notificacion.id}")
        print(f"üìã Tipo: {notificacion.tipo}")
        print(f"üë§ Usuario: {notificacion.usuario.email if notificacion.usuario else 'Sin usuario'}")
        print(f"üìÆ Destinatario: {notificacion.email_destinatario}")
        print(f"üì¶ Contexto: {datos_contexto}")
        
        try:
            # Obtener o crear template
            print(f"üìÑ [EMAIL-SERVICE] Obteniendo template para tipo: {notificacion.tipo}")
            template = self._obtener_template(notificacion.tipo)
            print(f"‚úÖ [EMAIL-SERVICE] Template obtenido: {template.nombre}")
            
            # Preparar contexto
            print(f"üîß [EMAIL-SERVICE] Preparando contexto...")
            contexto = self._preparar_contexto(notificacion, datos_contexto)
            print(f"‚úÖ [EMAIL-SERVICE] Contexto preparado con {len(contexto)} variables")
            
            # Renderizar contenido
            print(f"üé® [EMAIL-SERVICE] Renderizando contenido...")
            asunto = self._renderizar_asunto(template.asunto, contexto)
            print(f"‚úÖ [EMAIL-SERVICE] Asunto: {asunto}")
            
            contenido_html = self._renderizar_template_html(notificacion.tipo, contexto)
            print(f"‚úÖ [EMAIL-SERVICE] HTML renderizado ({len(contenido_html)} caracteres)")
            
            contenido_texto = template.contenido_texto or ""
            
            # Actualizar notificaci√≥n con contenido
            print(f"üíæ [EMAIL-SERVICE] Guardando contenido en BD...")
            notificacion.asunto = asunto
            notificacion.contenido = contenido_html
            notificacion.save(update_fields=['asunto', 'contenido'])
            print(f"‚úÖ [EMAIL-SERVICE] Contenido guardado")
            
            # Enviar correo
            print(f"üì§ [EMAIL-SERVICE] Enviando correo...")
            print(f"   Destinatario: {notificacion.email_destinatario}")
            print(f"   Asunto: {asunto}")
            self._enviar_correo(
                destinatario=notificacion.email_destinatario,
                asunto=asunto,
                contenido_html=contenido_html,
                contenido_texto=contenido_texto
            )
            print(f"‚úÖ [EMAIL-SERVICE] Correo enviado exitosamente")
            
            # Marcar como enviada
            notificacion.marcar_como_enviada()
            print(f"‚úÖ [EMAIL-SERVICE] Notificaci√≥n marcada como enviada")
            print(f"{'='*60}\n")
            
            logger.info(f"Notificaci√≥n {notificacion.tipo} enviada exitosamente a {notificacion.email_destinatario}")
            
        except Exception as e:
            error_msg = f"Error enviando notificaci√≥n: {str(e)}"
            print(f"‚ùå [EMAIL-SERVICE] ERROR: {error_msg}")
            print(f"‚ùå [EMAIL-SERVICE] Tipo error: {type(e).__name__}")
            print(f"{'='*60}\n")
            logger.error(error_msg)
            notificacion.marcar_como_fallida(error_msg)
            raise
    
    def _obtener_template(self, tipo_notificacion: str) -> TemplateCorreo:
        """Obtiene o crea el template para el tipo de notificaci√≥n"""
        try:
            return TemplateCorreo.objects.get(tipo=tipo_notificacion, activo=True)
        except TemplateCorreo.DoesNotExist:
            # Crear template por defecto
            return self._crear_template_por_defecto(tipo_notificacion)
    
    def _crear_template_por_defecto(self, tipo_notificacion: str) -> TemplateCorreo:
        """Crea un template por defecto para el tipo de notificaci√≥n"""
        templates_por_defecto = {
            TipoNotificacion.BIENVENIDA: {
                'nombre': 'Bienvenida',
                'asunto': '¬°Bienvenido/a a Life Sex Shop!',
            },
            TipoNotificacion.ORDEN_CONFIRMADA: {
                'nombre': 'Orden Confirmada',
                'asunto': 'Tu orden #{{ orden.id }} ha sido confirmada',
            },
            TipoNotificacion.ORDEN_ENVIADA: {
                'nombre': 'Orden Enviada',
                'asunto': '¬°Tu orden #{{ orden.id }} est√° en camino!',
            },
            TipoNotificacion.PAGO_EXITOSO: {
                'nombre': 'Pago Exitoso',
                'asunto': 'Pago confirmado - Orden #{{ orden.id }}',
            },
            TipoNotificacion.RESETEO_PASSWORD: {
                'nombre': 'Reseteo de Contrase√±a',
                'asunto': 'Restablecer tu contrase√±a - Life Sex Shop',
            },
        }
        
        template_info = templates_por_defecto.get(tipo_notificacion, {
            'nombre': f'Template {tipo_notificacion}',
            'asunto': f'Notificaci√≥n de Life Sex Shop',
        })
        
        return TemplateCorreo.objects.create(
            tipo=tipo_notificacion,
            nombre=template_info['nombre'],
            asunto=template_info['asunto'],
            contenido_html='<p>Template por defecto</p>',
            activo=True
        )
    
    def _preparar_contexto(self, notificacion: NotificacionCorreo, datos_contexto: Dict[str, Any]) -> Dict[str, Any]:
        """Prepara el contexto para renderizar el template"""
        contexto = {
            'usuario': notificacion.usuario,
            'email_destinatario': notificacion.email_destinatario,
            'site_url': self.site_url,
            'unsubscribe_url': f"{self.site_url}/notificaciones/unsubscribe/{notificacion.usuario.id}/",
            'fecha_actual': timezone.now(),
        }
        
        # Agregar datos espec√≠ficos del contexto
        contexto.update(datos_contexto)
        
        return contexto
    
    def _renderizar_asunto(self, template_asunto: str, contexto: Dict[str, Any]) -> str:
        """Renderiza el asunto del correo"""
        from django.template import Context, Template
        template = Template(template_asunto)
        return template.render(Context(contexto))
    
    def _renderizar_template_html(self, tipo_notificacion: str, contexto: Dict[str, Any]) -> str:
        """Renderiza el template HTML del correo"""
        template_mapping = {
            TipoNotificacion.BIENVENIDA: 'emails/bienvenida.html',
            TipoNotificacion.ORDEN_CONFIRMADA: 'emails/orden_confirmada.html',
            TipoNotificacion.ORDEN_ENVIADA: 'emails/orden_enviada.html',
            TipoNotificacion.PAGO_EXITOSO: 'emails/pago_exitoso.html',
            TipoNotificacion.RESETEO_PASSWORD: 'emails/reseteo_password.html',
        }
        
        template_path = template_mapping.get(tipo_notificacion, 'emails/base.html')
        
        try:
            return render_to_string(template_path, contexto)
        except Exception as e:
            logger.error(f"Error renderizando template {template_path}: {str(e)}")
            # Fallback a template b√°sico
            return render_to_string('emails/base.html', contexto)
    
    def _enviar_correo(self, destinatario: str, asunto: str, contenido_html: str, contenido_texto: str = ""):
        """Env√≠a el correo electr√≥nico"""
        print(f"\nüì® [EMAIL-SEND] Preparando env√≠o de correo")
        print(f"   From: {self.from_email}")
        print(f"   To: {destinatario}")
        print(f"   Subject: {asunto}")
        print(f"   HTML length: {len(contenido_html)} caracteres")
        print(f"   Text length: {len(contenido_texto)} caracteres")
        
        # Verificar configuraci√≥n de email
        print(f"\n‚öôÔ∏è [EMAIL-CONFIG] Verificando configuraci√≥n...")
        print(f"   EMAIL_HOST: {settings.EMAIL_HOST}")
        print(f"   EMAIL_PORT: {settings.EMAIL_PORT}")
        print(f"   EMAIL_USE_TLS: {settings.EMAIL_USE_TLS}")
        print(f"   EMAIL_HOST_USER: {settings.EMAIL_HOST_USER}")
        print(f"   EMAIL_HOST_PASSWORD: {'‚úÖ Configurado' if settings.EMAIL_HOST_PASSWORD else '‚ùå NO configurado'}")
        print(f"   DEFAULT_FROM_EMAIL: {settings.DEFAULT_FROM_EMAIL}")
        
        try:
            print(f"\nüî® [EMAIL-SEND] Creando mensaje...")
            msg = EmailMultiAlternatives(
                subject=asunto,
                body=contenido_texto or "Este correo requiere un cliente que soporte HTML.",
                from_email=self.from_email,
                to=[destinatario]
            )
            print(f"‚úÖ [EMAIL-SEND] Mensaje creado")
            
            if contenido_html:
                print(f"üìé [EMAIL-SEND] Adjuntando versi√≥n HTML...")
                msg.attach_alternative(contenido_html, "text/html")
                print(f"‚úÖ [EMAIL-SEND] HTML adjuntado")
            
            print(f"üì§ [EMAIL-SEND] Enviando mensaje al servidor SMTP...")
            resultado = msg.send()
            print(f"‚úÖ [EMAIL-SEND] ¬°Mensaje enviado exitosamente!")
            print(f"   Resultado: {resultado}")
            
        except Exception as e:
            print(f"‚ùå [EMAIL-SEND] ERROR al enviar correo")
            print(f"   Error: {str(e)}")
            print(f"   Tipo: {type(e).__name__}")
            import traceback
            print(f"   Traceback: {traceback.format_exc()}")
            logger.error(f"Error enviando correo a {destinatario}: {str(e)}")
            raise
    
    def procesar_notificaciones_programadas(self):
        """Procesa las notificaciones programadas que deben enviarse"""
        ahora = timezone.now()
        notificaciones_pendientes = NotificacionCorreo.objects.filter(
            estado=EstadoNotificacion.PROGRAMADA,
            fecha_programada__lte=ahora
        )
        
        for notificacion in notificaciones_pendientes:
            try:
                self._procesar_notificacion(notificacion, notificacion.datos_adicionales)
            except Exception as e:
                logger.error(f"Error procesando notificaci√≥n programada {notificacion.id}: {str(e)}")
                continue
    
    def reenviar_notificacion(self, notificacion: NotificacionCorreo):
        """Reenv√≠a una notificaci√≥n fallida"""
        if notificacion.intentos_envio >= 3:
            logger.warning(f"Notificaci√≥n {notificacion.id} excedi√≥ l√≠mite de intentos")
            return
        
        notificacion.estado = EstadoNotificacion.PENDIENTE
        notificacion.mensaje_error = None
        notificacion.save(update_fields=['estado', 'mensaje_error'])
        
        self._procesar_notificacion(notificacion, notificacion.datos_adicionales)
    
    # M√©todos de conveniencia para tipos espec√≠ficos de notificaciones
    
    def enviar_bienvenida(self, usuario):
        """Env√≠a correo de bienvenida a un nuevo usuario"""
        return self.enviar_notificacion(
            usuario=usuario,
            tipo_notificacion=TipoNotificacion.BIENVENIDA,
            datos_contexto={'usuario': usuario.username}
        )
    
    def enviar_orden_confirmada(self, usuario, orden):
        """Env√≠a confirmaci√≥n de orden"""
        return self.enviar_notificacion(
            usuario=usuario,
            tipo_notificacion=TipoNotificacion.ORDEN_CONFIRMADA,
            datos_contexto={
                'orden_id': orden.id,
                'orden_total': str(orden.total),
                'orden_estado': orden.estado,
            }
        )
    
    def enviar_orden_enviada(self, usuario, orden, tracking_number=None, courier=None):
        """Env√≠a notificaci√≥n de orden enviada"""
        return self.enviar_notificacion(
            usuario=usuario,
            tipo_notificacion=TipoNotificacion.ORDEN_ENVIADA,
            datos_contexto={
                'orden_id': orden.id,
                'orden_total': str(orden.total),
                'orden_estado': orden.estado,
                'tracking_number': tracking_number,
                'courier': courier,
                'tracking_url': f"https://tracking.example.com/{tracking_number}" if tracking_number else None,
            }
        )
    
    def enviar_pago_exitoso(self, usuario, orden, pago):
        """Env√≠a confirmaci√≥n de pago exitoso"""
        return self.enviar_notificacion(
            usuario=usuario,
            tipo_notificacion=TipoNotificacion.PAGO_EXITOSO,
            datos_contexto={
                'orden_id': orden.id,
                'orden_total': str(orden.total),
                'orden_estado': orden.estado,
                'pago_id': pago.id,
                'pago_monto': str(pago.monto),
                'pago_estado': pago.estado,
            }
        )
    
    def enviar_reseteo_password(self, usuario, reset_link: str, ip_address: str = None):
        """Env√≠a correo para resetear contrase√±a"""
        return self.enviar_notificacion(
            usuario=usuario,
            tipo_notificacion=TipoNotificacion.RESETEO_PASSWORD,
            datos_contexto={
                'reset_link': reset_link,
                'ip_address': ip_address,
                'fecha_solicitud': timezone.now(),
            }
        )