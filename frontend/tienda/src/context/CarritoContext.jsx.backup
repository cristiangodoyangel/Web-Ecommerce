import React, { createContext, useContext, useState, useEffect } from 'react';
import { carritoService } from '../services/carritoService';

const CarritoContext = createContext();

export const useCarrito = () => {
  const context = useContext(  const actualizarCantidad = async (itemId, nuevaCantidad) => {
    try {
      // Validar token antes de la operación
      const isValidAuth = validateToken();
      setIsAuthenticated(isValidAuth);
      
      // EMERGENCIA: Actualizar en localStorage
      const localCart = JSON.parse(localStorage.getItem('emergency_cart') || '[]');
      const itemIndex = localCart.findIndex(item => item.id === itemId);
      
      if (itemIndex >= 0) {
        if (nuevaCantidad <= 0) {
          localCart.splice(itemIndex, 1);
        } else {
          localCart[itemIndex].cantidad = nuevaCantidad;
        }
        localStorage.setItem('emergency_cart', JSON.stringify(localCart));
        console.log('CarritoContext - EMERGENCIA: Cantidad actualizada en localStorage');
      }
      
      // Intentar también con el backend
      try {
        await carritoService.actualizarCantidad(itemId, nuevaCantidad);
      } catch (apiError) {
        console.warn('CarritoContext - API falló, pero localStorage funciona:', apiError);
      }
      
      await cargarCarrito();
      return { success: true };ntext);
  if (!context) {
    throw new Error('useCarrito debe usarse dentro de CarritoProvider');
  }
  return context;
};

export const CarritoProvider = ({ children }) => {
  const [items, setItems] = useState([]);
  const [resumen, setResumen] = useState({
    total_items: 0,
    total_precio: 0,
    items_count: 0
  });
  const [isLoading, setIsLoading] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [guestData, setGuestData] = useState(null); // Datos del invitado

  // Función para verificar si el token está expirado
  const isTokenExpired = (token) => {
    if (!token) return true;
    
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const currentTime = Date.now() / 1000;
      return payload.exp < currentTime;
    } catch (error) {
      return true;
    }
  };

  // Función para validar y limpiar token expirado
  const validateToken = () => {
    const token = localStorage.getItem('access_token');
    if (token && isTokenExpired(token)) {
      // Token expirado, limpiar almacenamiento
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      return false;
    }
    return !!token;
  };

  // Verificar autenticación
  useEffect(() => {
    const isValidAuth = validateToken();
    setIsAuthenticated(isValidAuth);
    
    // Cargar datos de invitado si existen y no hay autenticación válida
    const storedGuestData = localStorage.getItem('guest_data');
    if (storedGuestData && !isValidAuth) {
      setGuestData(JSON.parse(storedGuestData));
    }
    
    // Escuchar cambios en localStorage
    const handleStorageChange = () => {
      const newIsValidAuth = validateToken();
      const wasAuthenticated = isAuthenticated;
      
      setIsAuthenticated(newIsValidAuth);
      
      // Si el usuario se autenticó, migrar carrito
      if (!wasAuthenticated && newIsValidAuth) {
        migrarCarritoSiEsNecesario();
        setGuestData(null);
        localStorage.removeItem('guest_data');
      }
      // Si cerró sesión o token expiró, recargar carrito (para usar sesión)
      else if (wasAuthenticated && !newIsValidAuth) {
        cargarCarrito();
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [isAuthenticated]);

  // Cargar carrito al iniciar
  useEffect(() => {
    cargarCarrito();
  }, []);

  const migrarCarritoSiEsNecesario = async () => {
    // Si hay items en localStorage (de sesión de invitado), migrarlos
    const sessionKey = localStorage.getItem('guest_session_key');
    if (sessionKey) {
      try {
        await carritoService.migrarCarrito(sessionKey);
        localStorage.removeItem('guest_session_key');
        cargarCarrito();
      } catch (error) {
        console.error('Error al migrar carrito:', error);
      }
    }
  };

  const cargarCarrito = async () => {
    setIsLoading(true);
    try {
      // Validar token antes de hacer la petición
      const isValidAuth = validateToken();
      setIsAuthenticated(isValidAuth);
      
      // EMERGENCIA: Si backend falla, usar localStorage
      try {
        const [itemsData, resumenData] = await Promise.all([
          carritoService.obtenerCarrito(),
          carritoService.obtenerResumen()
        ]);
        
        console.log('CarritoContext - cargarCarrito - resumenData:', resumenData);
        
        // Si el backend devuelve datos válidos, usarlos
        if (resumenData && (resumenData.total_items > 0 || resumenData.items_count > 0)) {
          setItems(itemsData);
          setResumen(resumenData);
        } else {
          // BACKUP: Usar localStorage si backend devuelve ceros
          const localCart = JSON.parse(localStorage.getItem('emergency_cart') || '[]');
          const localResumen = {
            total_items: localCart.reduce((sum, item) => sum + item.cantidad, 0),
            total_precio: localCart.reduce((sum, item) => sum + (parseFloat(item.producto.precio) * item.cantidad), 0),
            items_count: localCart.length
          };
          
          console.log('CarritoContext - EMERGENCIA: Usando localStorage:', localResumen);
          setItems(localCart);
          setResumen(localResumen);
        }
        
        // Forzar re-render para componentes que usan el contexto
        if (resumenData) {
          console.log('CarritoContext - Estado actualizado - total_items:', resumenData.total_items);
        }
      } catch (apiError) {
        console.error('CarritoContext - Error API, usando localStorage de emergencia:', apiError);
        
        // EMERGENCIA TOTAL: Solo localStorage
        const localCart = JSON.parse(localStorage.getItem('emergency_cart') || '[]');
        const localResumen = {
          total_items: localCart.reduce((sum, item) => sum + item.cantidad, 0),
          total_precio: localCart.reduce((sum, item) => sum + (parseFloat(item.producto.precio) * item.cantidad), 0),
          items_count: localCart.length
        };
        
        setItems(localCart);
        setResumen(localResumen);
        console.log('CarritoContext - EMERGENCIA TOTAL: localStorage único:', localResumen);
      }
    } catch (error) {
      console.error('Error al cargar carrito:', error);
      
      // Si es error 401, validar token nuevamente
      if (error.response?.status === 401) {
        const isValidAuth = validateToken();
        setIsAuthenticated(isValidAuth);
      }
      
      // Si hay error y no está autenticado, inicializar vacío
      if (!isAuthenticated) {
        setItems([]);
        setResumen({ total_items: 0, total_precio: 0, items_count: 0 });
      }
    } finally {
      setIsLoading(false);
    }
  };

  const agregarProducto = async (productoId, cantidad = 1) => {
    try {
      // Validar token antes de la operación
      const isValidAuth = validateToken();
      setIsAuthenticated(isValidAuth);
      
      // EMERGENCIA: Agregar a localStorage primero
      const producto = await fetch(`http://localhost:8000/api/productos/${productoId}/`)
        .then(res => res.ok ? res.json() : null)
        .catch(() => null);
      
      if (producto) {
        const localCart = JSON.parse(localStorage.getItem('emergency_cart') || '[]');
        const existingIndex = localCart.findIndex(item => item.producto.id === productoId);
        
        if (existingIndex >= 0) {
          localCart[existingIndex].cantidad += cantidad;
        } else {
          localCart.push({
            id: Date.now(),
            producto: {
              ...producto,
              precio: parseFloat(producto.precio) // Asegurar que sea número
            },
            cantidad: cantidad
          });
        }
        
        localStorage.setItem('emergency_cart', JSON.stringify(localCart));
        console.log('CarritoContext - EMERGENCIA: Producto agregado a localStorage con precio:', producto.precio);
      }
      
      // Intentar también con el backend
      try {
        await carritoService.agregarProducto(productoId, cantidad);
      } catch (apiError) {
        console.warn('CarritoContext - API falló, pero localStorage funciona:', apiError);
      }
      
      // Recargar carrito inmediatamente después de agregar
      await cargarCarrito();
      
      console.log('CarritoContext - Producto agregado, carrito recargado');
      return { success: true };
    } catch (error) {
      console.error('Error al agregar producto:', error);
      
      // Si es error 401, validar token
      if (error.response?.status === 401) {
        const isValidAuth = validateToken();
        setIsAuthenticated(isValidAuth);
      }
      
      return { success: false, error: error.message };
    }
  };

  const agregarProductoInvitado = async (productoId, cantidad = 1, datosInvitado) => {
    try {
      // Guardar datos del invitado
      setGuestData(datosInvitado);
      localStorage.setItem('guest_data', JSON.stringify(datosInvitado));
      
      // Agregar producto usando el servicio
      await carritoService.agregarProducto(productoId, cantidad);
      
      // Recargar carrito inmediatamente
      await cargarCarrito();
      
      console.log('CarritoContext - Producto agregado como invitado, carrito recargado');
      return { success: true };
    } catch (error) {
      console.error('Error al agregar producto como invitado:', error);
      return { success: false, error: error.message };
    }
  };

  const actualizarCantidad = async (itemId, cantidad) => {
    try {
      // Validar token antes de la operación
      const isValidAuth = validateToken();
      setIsAuthenticated(isValidAuth);
      
      await carritoService.actualizarCantidad(itemId, cantidad);
      await cargarCarrito();
      return { success: true };
    } catch (error) {
      console.error('Error al actualizar cantidad:', error);
      
      // Si es error 401, validar token
      if (error.response?.status === 401) {
        const isValidAuth = validateToken();
        setIsAuthenticated(isValidAuth);
      }
      
      return { success: false, error: error.message };
    }
  };

  const eliminarItem = async (itemId) => {
    try {
      // Validar token antes de la operación
      const isValidAuth = validateToken();
      setIsAuthenticated(isValidAuth);
      
      await carritoService.eliminarItem(itemId);
      await cargarCarrito();
      return { success: true };
    } catch (error) {
      console.error('Error al eliminar item:', error);
      
      // Si es error 401, validar token
      if (error.response?.status === 401) {
        const isValidAuth = validateToken();
        setIsAuthenticated(isValidAuth);
      }
      
      return { success: false, error: error.message };
    }
  };

  const limpiarCarrito = async () => {
    try {
      // Validar token antes de la operación
      const isValidAuth = validateToken();
      setIsAuthenticated(isValidAuth);
      
      await carritoService.limpiarCarrito();
      setItems([]);
      setResumen({ total_items: 0, total_precio: 0, items_count: 0 });
      return { success: true };
    } catch (error) {
      console.error('Error al limpiar carrito:', error);
      
      // Si es error 401, validar token
      if (error.response?.status === 401) {
        const isValidAuth = validateToken();
        setIsAuthenticated(isValidAuth);
      }
      
      return { success: false, error: error.message };
    }
  };

  const value = {
    items,
    resumen,
    isLoading,
    isAuthenticated,
    guestData,
    cargarCarrito,
    agregarProducto,
    agregarProductoInvitado,
    actualizarCantidad,
    eliminarItem,
    limpiarCarrito
  };

  return (
    <CarritoContext.Provider value={value}>
      {children}
    </CarritoContext.Provider>
  );
};